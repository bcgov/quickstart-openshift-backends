apiVersion: template.openshift.io/v1
kind: Template
parameters:
  - name: NAME
    description: Module name
    value: quickstart-openshift-backends
  - name: COMPONENT
    description: Component name
    value: backend-go
  - name: COMPONENT_MIGRATIONS
    description: Component name for database migrations
    value: migrations-go
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: ORG
    description: Organization name, e.g. bcgov
    value: bcgov
  - name: CPU_REQUEST
    value: "25m"
  - name: MEMORY_REQUEST
    value: "50Mi"
  - name: CPU_LIMIT
    value: "75m"
  - name: MEMORY_LIMIT
    value: "150Mi"
  - name: CPU_REQUEST_INIT
    value: "125m"
  - name: MEMORY_REQUEST_INIT
    value: "100Mi"
  - name: CPU_LIMIT_INIT
    value: "250m"
  - name: MEMORY_LIMIT_INIT
    value: "250Mi"
  - name: MIN_REPLICAS
    description: The minimum amount of replicas for the horizontal pod autoscaler.
    value: "3"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas for the horizontal pod autoscaler.
    value: "5"
objects:
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: "${NAME}-${ZONE}-${COMPONENT}"
      strategy:
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: "${NAME}-${ZONE}"
            deployment: "${NAME}-${ZONE}-${COMPONENT}"
        spec:
          containers:
            - image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${ZONE}
              imagePullPolicy: Always
              name: "${NAME}"
              env:
                - name: POSTGRES_HOST
                  value: "${NAME}-${ZONE}-database"
                - name: POSTGRES_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-database"
                      key: database-name
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-database"
                      key: database-password
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-database"
                      key: database-user
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 2
                timeoutSeconds: 2
                successThreshold: 1
                failureThreshold: 30
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 60
                timeoutSeconds: 5
          initContainers:
            - name: ${NAME}-${COMPONENT_MIGRATIONS}
              image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT_MIGRATIONS}:${ZONE}
              env:
                - name: FLYWAY_URL
                  value: "jdbc:postgresql://${NAME}-${ZONE}-database:5432/${NAME}"
                - name: FLYWAY_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-database"
                      key: database-user
                - name: FLYWAY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-database"
                      key: database-password
                - name: FLYWAY_BASELINE_ON_MIGRATE
                  value: "true"
                - name: FLYWAY_DEFAULT_SCHEMA
                  value: "go_api"
              resources:
                requests:
                  cpu: "${CPU_REQUEST_INIT}"
                  memory: "${MEMORY_REQUEST_INIT}"
                limits:
                  cpu: "${CPU_LIMIT_INIT}"
                  memory: "${MEMORY_LIMIT_INIT}"
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deployment: "${NAME}-${ZONE}-${COMPONENT}"
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      host: "${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}"
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: "${NAME}-${ZONE}-${COMPONENT}"
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: Deployment
        name: "${NAME}-${ZONE}-${COMPONENT}"
      minReplicas: "${{MIN_REPLICAS}}"
      maxReplicas: "${{MAX_REPLICAS}}"
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 100

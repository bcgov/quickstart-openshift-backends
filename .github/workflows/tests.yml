name: Tests

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  push:
    branches: [main]
  schedule:
    - cron: "0 11 * * 0" # 3 AM PST = 11 PM UDT, runs sundays
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  java:
    name: Java
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: backend-java
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run unit tests
        run: mvn -f pom.xml clean package

  python:
    name: Python
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: backend-py
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: cache poetry install
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ hashFiles('**/pyproject.toml') }}

      - uses: snok/install-poetry@v1.3.4
        with:
          version: 1.2.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - run: poetry run pytest

  javascript:
    name: JavaScript
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        dir: [backend, frontend]
        include:
          - dir: backend
            sonar_projectKey: quickstart-openshift_backend
            token: SONAR_TOKEN_BACKEND
            triggers: ('backend/')
          - dir: frontend
            sonar_projectKey: quickstart-openshift_frontend
            token: SONAR_TOKEN_FRONTEND
            triggers: ('frontend/')
    steps:
      - uses: bcgov-nr/action-test-and-analyse@v1.1.0
        with:
          commands: |
            npm ci
            npm run test:cov
          dir: ${{ matrix.dir }}
          node_version: "20"
          sonar_args: >
            -Dsonar.exclusions=**/coverage/**,**/node_modules/**,**/*spec.ts
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.project.monorepo.enabled=true
            -Dsonar.projectKey=${{ matrix.sonar_projectKey }}
            -Dsonar.sources=src
            -Dsonar.tests.inclusions=**/*spec.ts
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
          sonar_token: ${{ secrets[matrix.token] }}
          triggers: ${{ matrix.triggers }}

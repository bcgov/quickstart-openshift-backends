---
version: "3.9"

x-var:
  - &POSTGRES_USER
    postgres
  - &POSTGRES_PASSWORD
    default
  - &POSTGRES_DATABASE
    postgres

x-flyway-vars: &flyway-vars
  FLYWAY_URL: jdbc:postgresql://database:5432/postgres
  FLYWAY_USER: *POSTGRES_USER
  FLYWAY_PASSWORD: *POSTGRES_PASSWORD
  FLYWAY_BASELINE_ON_MIGRATE: true

x-postgres-vars: &postgres-vars
  POSTGRES_HOST: database
  POSTGRES_USER: *POSTGRES_USER
  POSTGRES_PASSWORD: *POSTGRES_PASSWORD
  POSTGRES_DATABASE: *POSTGRES_DATABASE

x-python-vars: &python-vars
  PIP_NO_CACHE_DIR: off
  PIP_DISABLE_PIP_VERSION_CHECK: on
  PIP_DEFAULT_TIMEOUT: 100
  POETRY_VERSION: 1.2.2
  POETRY_HOME: /opt/poetry
  POETRY_VIRTUALENVS_IN_PROJECT: true
  POETRY_NO_INTERACTION: 1
  PYSETUP_PATH: /application
  VENV_PATH: /application/.venv
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1
  PYTHONPATH: /application/app/src

services:
  database:
    image: postgres:15
    container_name: database
    environment:
      <<: *postgres-vars
    healthcheck:
      test: ["CMD", "pg_isready", "-U", *POSTGRES_USER]
    ports: ["5432:5432"]
3
  migrations-py:
    profiles: ["python", "all"]
    image: flyway/flyway:9-alpine
    container_name: migrations-py
    command: info migrate info
    volumes: ["./backend-py/db/migrations:/flyway/sql:ro"]
    environment:
      <<: *flyway-vars
      FLYWAY_DEFAULT_SCHEMA: py_api
    depends_on:
      database:
        condition: service_healthy

  backend-py-model-generator:
    profiles: ["python", "all"]
    image: python:3.11-slim-buster@sha256:c46b0ae5728c2247b99903098ade3176a58e274d9c7d2efeaaab3e0621a53935 # DO NOT change, as it breaks the module.
    container_name: backend-py-model-generator
    environment:
      <<: *postgres-vars
    entrypoint: /app/generate-models.sh
    volumes: 
      - "./backend-py/src/v1/models:/app/models"
      - "./backend-py/generate-models.sh:/app/generate-models.sh"
    depends_on:
      migrations-py:
        condition: service_completed_successfully

  backend-py:
    profiles: ["python", "all"]
    image: python:3.13
    container_name: backend-py
    entrypoint: /application/start-local.sh
    volumes: ["./backend-py:/application", "/application/.venv"]
    healthcheck:
      test: timeout 10s bash -c 'true > /dev/tcp/127.0.0.1/3000'

    environment:
      <<: [*postgres-vars, *python-vars]
    ports: ["3003:3000"]
    depends_on:
      backend-py-model-generator:
        condition: service_started

  backend-py-test:
    profiles: ["python", "all"]
    image: python:3.13
    container_name: backend-py-test
    entrypoint: /application/run-unit-tests.sh
    volumes: ["./backend-py:/application", "/application/.venv"]
    environment:
      <<: [*postgres-vars, *python-vars]
    depends_on:
      backend-py:
        condition: service_healthy

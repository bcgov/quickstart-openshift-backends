# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#-- global variables, can be accessed by sub-charts.
global:
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level.
  repository: ~ # provide the repo name from where images will be sourced for example bcgo
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level. default is ghcr.io
  registry: ghcr.io # ghcr.io for directly streaming from github container registry or "artifacts.developer.gov.bc.ca/github-docker-remote" for artifactory, or any other registry.
  #-- the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
  tag: ~
  #-- turn off autoscaling for the entire suite by setting this to false. default is true.
  autoscaling: false
  #-- global secrets, can be accessed by sub-charts.
  secrets:
    enabled: true
    databasePassword: ~
    databaseUser: ~
    databaseName: ~
    annotation:
      helm.sh/policy: "keep"
  #-- domain of the application, it is required, apps.silver.devops.gov.bc.ca for silver cluster and apps.devops.gov.bc.ca for gold cluster
  domain: "apps.silver.devops.gov.bc.ca" # it is apps.gold.devops.gov.bc.ca for gold cluster
  #-- the database Alias gives a nice way to switch to different databases, crunchy, patroni ... etc.
  databaseAlias: bitnami-pg
#-- the components of the application, backend.
backendPy:
  #-- enable or disable backend
  enabled: true
  #-- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate
  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 3
    #-- the maximum number of replicas.
    maxReplicas: 7
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
    resources:
      requests:
        cpu: 50m
        memory: 25Mi
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    port: 80 # this is the service port, where it will be exposed internal to the namespace.
    targetPort: 3000 # this is container port where app listens on
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.
backendGo:
  #-- enable or disable backend
  enabled: true
  #-- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate
  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 3
    #-- the maximum number of replicas.
    maxReplicas: 7
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
    resources:
      requests:
        cpu: 50m
        memory: 25Mi
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    port: 80 # this is the service port, where it will be exposed internal to the namespace.
    targetPort: 3000 # this is container port where app listens on
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.
backendJava:
  #-- enable or disable backend
  enabled: true
  #-- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate
  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 3
    #-- the maximum number of replicas.
    maxReplicas: 7
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
    resources:
      requests:
        cpu: 50m
        memory: 25Mi
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    port: 80 # this is the service port, where it will be exposed internal to the namespace.
    targetPort: 3000 # this is container port where app listens on
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.



bitnami-pg:
  enabled: false
  image:
    registry: ghcr.io
    repository: bcgov/nr-containers/bitnami/postgresql
    tag: 15.10.0@sha256:a06e164dee7e912bfa1ad5df34f5e2b60820c6b26876757bfb7b589b8b5b609e
  auth:
    existingSecret: '{{ .Release.Name }}'
    username: 'quickstart'
    database: quickstart
  shmVolume:
    enabled: false
  backup:
    enabled: false
    cronjob:
      containerSecurityContext: { }
      podSecurityContext:
        enabled: false
      storage:
        size: 200Mi
  primary:
    persistence:
      enabled: true
      storageClass: netapp-block-standard
      accessModes:
        - ReadWriteOnce
      size: 100Mi
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    initdb:
      scripts: # remove the below script, if POSTGIS is not required.
        postgis.sh: |
          #!/bin/sh
          PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -d postgres -c "CREATE EXTENSION postgis;"
    resources:
      requests:
        cpu: 50m
        memory: 150Mi

backup:
  enabled: false
  pvc:
    enabled: true
    size: 256Mi
    storageClassName: netapp-file-standard
    accessModes: ReadWriteOnce
  cronjob:
    enabled: true
    volumes:
      - name: "{{.Release.Name}}-backup"
        persistentVolumeClaim:
          claimName: "{{.Release.Name}}-backup"
    restartPolicy: "Never"
    schedule: "0 0 * * *"
    concurrencyPolicy: "Replace"
    failedJobsHistoryLimit: 7
    successfulJobsHistoryLimit: 30
    startingDeadlineSeconds: 3600
  containers:
    - name: backup
      registry: 'docker.io'
      repository: 'bcgovimages' # example, it includes registry and repository
      image: backup-container # the exact component name, be it backend, api-1 etc...
      tag: latest # the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
      command:
        - "/bin/bash"
        - "-c"
        - "/backup.sh -1"
      volumeMounts:
        - mountPath: "/backups/"
          name: "{{.Release.Name}}-backup"
      env:
        fromValues:
          - name: BACKUP_DIR
            value: "/backups/"
          - name: BACKUP_STRATEGY
            value: "rolling"
          - name: NUM_BACKUPS
            value: '5'
          - name: DAILY_BACKUPS
            value: '7'
          - name: WEEKLY_BACKUPS
            value: '4'
          - name: MONTHLY_BACKUPS
            value: '1'
          - name: DATABASE_SERVICE_NAME # depends on which chart being used, adjust accordingly.
            value: '{{.Release.Name}}-{{.Values.global.databaseAlias}}'
          - name: DEFAULT_PORT
            value: "5432"
        fromGlobalSecret:
          - name: DATABASE_PASSWORD
            key: password
          - name: POSTGRESQL_DATABASE
            key: databaseName
          - name: DATABASE_USER
            key: databaseUser
      resources:
        requests:
          cpu: 20m
          memory: 128Mi
